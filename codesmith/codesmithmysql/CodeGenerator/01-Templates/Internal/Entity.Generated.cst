<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Register Name="TreeEntity" Template="Trees\TreeEntity.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\Common\Model.cs" %>
<%@ Assembly Src="..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template =new TreeEntity();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("Entity",Entity);
    template.Render(this.Response);
    return;
}
%>
using System;
using Sand.Helpers;
using Sand.Dependency;
using Sand.Domain.Entities;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
namespace <%= Entity.GetNamespace(Namespace,"Domain.Entities") %> {
    /// <summary>
    /// <%= Description %>
    /// </summary>
    [Description( "<%= Description %>" )]
    public partial class <%= SafeClassName %> : Entity<%= Entity.GetEntity() %>,ISoftDelete {
        /// <summary>
        /// 初始化<%= Description %>
        /// </summary>
        public <%= SafeClassName %>(){
        }
      <%--  /// <summary>
        /// 初始化<%= Description %>
        /// </summary>
        /// <param name="id"><%= Description %>标识</param>
        public <%= SafeClassName %>( <%= Entity.GetKeyTypeString() %> id ) {
            <% foreach(var r in Entity.Relationships.Where(e => e.ThisCardinality == Cardinality.Many)) { %>
            <%= r.ThisPropertyName.ToSafeName() %> = new List<<%= r.OtherEntity.ToSafeName() %>>();
            <% } %>
        }--%>
        <% foreach(Property p in Entity.Properties) { %>
        <% if(p.PropertyName=="TenantId") continue; %>
        <% if(p.PropertyName=="Version") continue; %>
        <% if(p.PropertyName=="IsDeleted") continue; %>
        <% if(p.PropertyName=="IsEnable") continue; %>
        <% if(p.PropertyName=="CreateTime") continue; %>
        <% if(p.PropertyName=="CreateId") continue; %>
        <% if(p.PropertyName=="CreateName") continue; %>
        <% if(p.PropertyName=="LastUpdateTime") continue; %>
        <% if(p.PropertyName=="LastUpdateId") continue; %>
        <% if(p.PropertyName=="LastUpdateName") continue; %>
        <% if(p.PropertyName=="IsEnable") continue; %>
        <% if(p.PropertyName=="Status") continue; %>
        <% if(p.PropertyName=="StroeId") continue; %>
        <% if(p.PropertyName=="IsDeleted") continue; %>
        <% if( p.IsPrimaryKey.SafeValue() ) continue; %>
        <% if( p.ColumnName == "Version" && p.DataType == DbType.Binary ) continue;%>
        /// <summary>
        /// <%= p.Description %>
        /// </summary>
        <% if( p.HasValidate() ) {%>
        <%= p.Validate() %>
        <%}%>
        public <%= p.TypeName %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <% }%>
        <% foreach(var r in Entity.Relationships) { %>
        <% if(r.ThisCardinality == Cardinality.Many) { %>
        /// <summary>
        /// <%= Entity.GetOtherDescription( r.OtherEntity ) %>列表
        /// </summary>
        public virtual ICollection<<%= r.OtherEntity.ToSafeName() %>> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
        <% } else { %>
        /// <summary>
        /// <%= Entity.GetOtherDescription( r.OtherEntity ) %>
        /// </summary>
        public virtual <%= r.OtherEntity.ToSafeName() %> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
        <% } %>
        <% }%>
       <%-- /// <summary>
        /// 添加描述
        /// </summary>
        protected override void AddDescriptions() {
            <% foreach(Property p in Entity.Properties) { %>
            <% if( p.ColumnName == "Version" && p.DataType == DbType.Binary ) continue;%>
            <% if( p.ColumnName == "IsDeleted" && p.DataType == DbType.Boolean ) continue;%>
            <% if( p.IsPrimaryKey.Value ){ %>
            AddDescription( "<%=p.Description %>", Id );
            <% continue;} %>
            AddDescription( "<%=p.Description %>", <%= p.PropertyName.ToSafeName() %><%= p.ShowDescription() %> );
            <% } %>
        }
        
        /// <summary>
        /// 添加变更列表
        /// </summary>
        protected override void AddChanges( <%= SafeClassName %> newEntity ) {
            <% foreach(Property p in Entity.Properties) { %>
            <% if( p.ColumnName == "Version" && p.DataType == DbType.Binary ) continue;%>
            <% if( p.ColumnName == "IsDeleted" && p.DataType == DbType.Boolean ) continue;%>
            <% if( p.IsPrimaryKey.Value ){ %>
            AddChange( "Id", "<%=p.Description %>", Id, newEntity.Id );            
            <%continue; } %>
            AddChange( "<%=p.ColumnName %>", "<%=p.Description %>", <%= p.PropertyName.ToSafeName() %>, newEntity.<%= p.PropertyName.ToSafeName() %> );
            <% } %>
        }--%>
         /// <summary>
        /// 删除标志
        /// </summary>
        [Required(ErrorMessage = "删除标志不能为空")]
        public bool IsDeleted { get; set; }
        
        /// <summary>
        /// 初始化
        /// </summary>
        public override void Init()
        {
            this.Id = Uuid.Next();
            base.Init();
        }
 
        /// <summary>
        /// 加载
        /// </summary>
        public override void Load(IEntity entity)
        {
            throw new NotImplementedException();
        }
    }
}