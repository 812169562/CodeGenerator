<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Register Name="TreeQuery" Template="Trees\TreeQuery.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\Common\Model.cs" %>
<%@ Assembly Src="..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template =new TreeQuery();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("Entity",Entity);
    template.Render(this.Response);
    return;
}
%>
using System;
using System.ComponentModel.DataAnnotations;
using Sand.Domain.Query;
using <%= Entity.GetNamespace(Namespace,"Domain.Entities") %>;


namespace <%= Entity.GetNamespace(Namespace,"Domain.Queries") %> {
    /// <summary>
    /// <%= Description %>查询实体
    /// </summary>
    public class <%= SafeClassName %>Query :  BaseQuery<<%= SafeClassName %><%= Entity.GetKeyTypeNoContainsGuid() %>> {
        <% foreach(Property p in Entity.Properties) { %>
        <% if( Entity.IsFilterByQueryObject(p) ) continue;%>
        <% if( p.SystemType == typeof(DateTime) ) {%>
        /// <summary>
        /// 起始<%=p.Description %>
        /// </summary>
        [Display( Name = "起始<%=p.Description %>" )]
        public DateTime? Begin<%= p.PropertyName.ToSafeName() %> { get; set; }
        /// <summary>
        /// 结束<%=p.Description %>
        /// </summary>
        [Display( Name = "结束<%=p.Description %>" )]
        public DateTime? End<%= p.PropertyName.ToSafeName() %> { get; set; }        
        <%continue;}%>
        <% if( p.SystemType == typeof(string) ) {%>
        
        private <%= p.SystemType.ToNullableType(true) %> <%= p.PropertyName.ToFieldName() %> = string.Empty;
        /// <summary>
        /// <%=p.Description %>
        /// </summary>
        [Display(Name="<%=p.Description %>")]
        public <%= p.SystemType.ToNullableType(true) %> <%= p.PropertyName.ToSafeName() %> {
            get { return <%= p.PropertyName.ToFieldName() %> == null ? string.Empty : <%= p.PropertyName.ToFieldName() %>.Trim(); }
            set{ <%= p.PropertyName.ToFieldName() %>=value;}
        }        
        <%continue;} %>
        /// <summary>
        /// <%=p.Description %>
        /// </summary>
        [Display(Name="<%=p.Description %>")]
        public <%= p.SystemType.ToNullableType(true) %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <% } %>
        
       <%-- /// <summary>
        /// 添加描述
        /// </summary>
        protected override void AddDescriptions() {
            base.AddDescriptions();
            <% foreach(Property p in Entity.Properties) { %>
            <% if( Entity.IsFilterByQueryObject(p) ) continue;%>
            <% if( p.DataType == DbType.DateTime ) {%>
            AddDescription( "起始<%=p.Description %>", Begin<%= p.PropertyName.ToSafeName() %> );
            AddDescription( "结束<%=p.Description %>", End<%= p.PropertyName.ToSafeName() %> );
            <%continue; } %>
            AddDescription( "<%=p.Description %>", <%= p.PropertyName.ToSafeName() %><%= p.ShowDescription() %> ); 
            <% } %>
        } --%>
    }
}
