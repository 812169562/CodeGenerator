<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Register Name="TreeDtoExtension" Template="Trees\TreeDtoExtension.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\Common\Model.cs" %>
<%@ Assembly Src="..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template =new TreeDtoExtension();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("Entity",Entity);
    template.Render(this.Response);
    return;
}
%>
using Util;
using <%= Entity.GetNamespace(Namespace,"Domains","Models") %>;
using Util.Maps;

namespace <%= Entity.GetNamespace(Namespace,"Services.Dtos") %> {
    /// <summary>
    /// <%= Description %>数据传输对象扩展
    /// </summary>
    public static class <%= SafeClassName %>DtoExtension {
        /// <summary>
        /// 转换为<%= Description %>实体
        /// </summary>
        /// <param name="dto"><%= Description %>数据传输对象</param>
        public static <%= SafeClassName %> ToEntity( this <%= SafeClassName %>Dto dto ) {
            if ( dto == null )
                return new <%= SafeClassName %>();
            return dto.MapTo( new <%= SafeClassName %>( dto.Id<%=Entity.GetToEntityConvert() %> ) );
        }
        
        /// <summary>
        /// 转换为<%= Description %>实体
        /// </summary>
        /// <param name="dto"><%= Description %>数据传输对象</param>
        public static <%= SafeClassName %> ToEntity2( this <%= SafeClassName %>Dto dto ) {
            if( dto == null )
                return new <%= SafeClassName %>();
            return new <%= SafeClassName %>( dto.Id<%=Entity.GetToEntityConvert() %> ) {
                <% foreach(Property p in Entity.Properties) { %>
                <% if( p.IsPrimaryKey.SafeValue() ) continue; %>
                <%= p.PropertyName.ToSafeName() %> = dto.<%= p.PropertyName.ToSafeName() %>,
                <%}%>
            };
        }
        
        /// <summary>
        /// 转换为<%= Description %>实体
        /// </summary>
        /// <param name="dto"><%= Description %>数据传输对象</param>
        public static <%= SafeClassName %> ToEntity3( this <%= SafeClassName %>Dto dto ) {
            if( dto == null )
                return new <%= SafeClassName %>();
            return <%= SafeClassName %>Factory.Create(
                <% foreach(Property p in Entity.Properties) { %>
                <% if( p.IsPrimaryKey.SafeValue() ) {%>
                <%= p.PropertyName.ToSafeName().ToCamelCase() %> : dto.Id<%=Entity.GetToEntityConvert() %>,
                <%continue;}%>
                <%= p.PropertyName.ToSafeName().ToCamelCase() %> : dto.<%= p.PropertyName.ToSafeName() %><%= Entity.GetComma(p,false) %>
                <%}%>
            );
        }
        
        /// <summary>
        /// 转换为<%= Description %>数据传输对象
        /// </summary>
        /// <param name="entity"><%= Description %>实体</param>
        public static <%= SafeClassName %>Dto ToDto(this <%= SafeClassName %> entity) {
            if( entity == null )
                return new <%= SafeClassName %>Dto();
            return entity.MapTo(new <%= SafeClassName %>Dto());
        }

        /// <summary>
        /// 转换为<%= Description %>数据传输对象
        /// </summary>
        /// <param name="entity"><%= Description %>实体</param>
        public static <%= SafeClassName %>Dto ToDto2( this <%= SafeClassName %> entity ) {
            if( entity == null )
                return new <%= SafeClassName %>Dto();
            return new <%= SafeClassName %>Dto {
                <% foreach(Property p in Entity.Properties) { %>
                <% if( p.IsPrimaryKey.SafeValue() ) {%>
                Id = entity.Id<%=Entity.GetToDtoConvert() %>,
                <%continue;}%>
                <%= p.PropertyName.ToSafeName() %> = entity.<%= p.PropertyName.ToSafeName() %>,
                <%}%>
            };
        }
    }
}
