<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Register Name="TreeService" Template="Trees\TreeService.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\Common\Model.cs" %>
<%@ Assembly Src="..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Namespace" Type="System.String" %>
<%@ Property Name="UnitOfWork" Type="System.String"  %>
<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="IUnitOfWorkNamespace" Type="System.String"  %>
using System;
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToPascalCase(); %>
<% string safeClassName = Entity.ClassName.ToCamelCase(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template =new TreeService();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("UnitOfWork",UnitOfWork);
    template.SetProperty("Entity",Entity);
    template.SetProperty("IUnitOfWorkNamespace",IUnitOfWorkNamespace);
    template.Render(this.Response);
    return;
}
%>
using System.Linq;
using System.Linq.Expressions;
using Sand.Domain.Uow;
using Sand.Service;
using Sand.Extensions;
using <%= Entity.GetNamespace(Namespace,"Domain.Entities") %>;
using <%= Entity.GetNamespace(Namespace,"Domain.Queries") %>;
using <%= Entity.GetNamespace(Namespace,"Service.Dtos") %>;
using <%= Entity.GetNamespace(Namespace,"Service.Contract") %>;
using <%= Entity.GetNamespace(Namespace,"Data.Repositories") %>;
using <%= Entity.GetNamespace(Namespace,"Domain.Repositories") %>;

namespace <%= Entity.GetNamespace(Namespace,"Service.Impl") %> {
    /// <summary>
    /// <%= Description %>服务
    /// </summary>
    public class <%= SafeClassName %>Service : BaseService<<%= SafeClassName %>Dto, <%= SafeClassName %>Query,<%= SafeClassName %><%=Entity.GetKeyTypeNoContainsGuid()%>>, I<%= SafeClassName %>Service {
        /// <summary>
        /// <%= Description %>仓储
        /// </summary>
        private readonly I<%=SafeClassName %>Repository _<%= safeClassName %>Repository;
        
        /// <summary>
        /// 初始化<%= Description %>服务
        /// </summary>
        /// <param name="uow">工作单元</param>
        /// <param name="<%= SafeClassName.ToCamelCase() %>Repository"><%= Description %>仓储</param>
        public <%= SafeClassName %>Service( IUnitOfWork uow, I<%= SafeClassName %>Repository <%= safeClassName %>Repository)
            : base( uow, <%= safeClassName %>Repository ) {
           _<%= safeClassName %>Repository = <%= safeClassName %>Repository;
        }
        
         /// <summary>
        /// 创建<%= Description %>条件表达式
        /// </summary>
        /// <param name="<%= safeClassName %>Query"><%= Description %>查询对象</param>
        /// <returns><%= Description %>查询表达式</returns>
        protected override Expression<Func<<%= SafeClassName %>, bool>> CreateQuery(<%= SafeClassName %>Query <%= safeClassName %>Query)
        {
           return  base.CreateQuery(<%= safeClassName %>Query);
        }
        <%--/// <summary>
        /// 转换为数据传输对象
        /// </summary>
        /// <param name="entity">实体</param>
        protected override <%= SafeClassName %>Dto ToDto( <%= SafeClassName %> entity ) {
            return entity.ToDto();
        }

        /// <summary>
        /// 转换为实体
        /// </summary>
        /// <param name="dto">数据传输对象</param>
        protected override <%= SafeClassName %> ToEntity( <%= SafeClassName %>Dto dto ) {
            return dto.ToEntity();
        }
        
        /// <summary>
        /// 创建查询对象
        /// </summary>
        /// <param name="param"><%= Description %>查询实体</param>
        protected override IQueryBase<<%= SafeClassName %>> CreateQuery( <%= SafeClassName %>Query param ) {
            return new Query<<%= SafeClassName %><%= Entity.GetKeyTypeNoContainsGuid() %>>( param );
        }--%>
    }
}